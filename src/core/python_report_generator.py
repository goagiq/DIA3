"""
Pure Python Report Generator

Core generator for modular enhanced reports without JavaScript dependencies.
Replaces the JavaScript-based modular_report_generator.py with a pure Python solution.

Features:
- Jinja2 template rendering
- CSS-only tooltips
- Static chart generation
- Offline viewing capability
- Fast performance with large datasets
"""

import asyncio
import json
from typing import Dict, Any, List, Optional, Type
from pathlib import Path
from datetime import datetime
import logging
from dataclasses import dataclass, field

from jinja2 import Environment, FileSystemLoader, Template
import pandas as pd
import numpy as np

logger = logging.getLogger(__name__)


@dataclass
class ReportConfig:
    """Configuration for report generation."""
    title: str
    description: str
    author: str = "DIA3 System"
    version: str = "1.0.0"
    output_format: str = "html"
    include_tooltips: bool = True
    include_charts: bool = True
    responsive_layout: bool = True
    offline_compatible: bool = True
    performance_optimized: bool = True


@dataclass
class ModuleData:
    """Data structure for module content."""
    module_id: str
    title: str
    content: str
    tooltip_data: Dict[str, Any] = field(default_factory=dict)
    chart_data: Dict[str, Any] = field(default_factory=dict)
    metadata: Dict[str, Any] = field(default_factory=dict)


class PythonReportGenerator:
    """Pure Python report generator with no JavaScript dependencies."""
    
    def __init__(self, output_dir: str = "Results", template_dir: str = "templates"):
        """Initialize the Python report generator.
        
        Args:
            output_dir: Directory for generated reports
            template_dir: Directory containing Jinja2 templates
        """
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(parents=True, exist_ok=True)
        
        # Initialize Jinja2 environment
        self.template_dir = Path(template_dir)
        self.template_dir.mkdir(parents=True, exist_ok=True)
        
        # Create Jinja2 environment with optimized settings
        self.jinja_env = Environment(
            loader=FileSystemLoader(str(self.template_dir)),
            autoescape=True,
            trim_blocks=True,
            lstrip_blocks=True,
            keep_trailing_newline=True
        )
        
        # Register custom filters
        self._register_custom_filters()
        
        # Initialize components
        self.css_tooltip_system = None  # Will be initialized later
        self.chart_generator = None     # Will be initialized later
        
        # Report configuration
        self.config = ReportConfig(
            title="Enhanced Modular Report",
            description="Generated by DIA3 Python Report System"
        )
        
        logger.info("✅ Python Report Generator initialized successfully")
    
    def _register_custom_filters(self):
        """Register custom Jinja2 filters for enhanced functionality."""
        
        def format_number(value, format_type="default"):
            """Format numbers for display."""
            if isinstance(value, (int, float)):
                if format_type == "percentage":
                    return f"{value:.1f}%"
                elif format_type == "currency":
                    return f"${value:,.2f}"
                elif format_type == "scientific":
                    return f"{value:.2e}"
                else:
                    return f"{value:,.2f}"
            return str(value)
        
        def truncate_text(text, length=100, suffix="..."):
            """Truncate text to specified length."""
            if len(text) <= length:
                return text
            return text[:length].rsplit(' ', 1)[0] + suffix
        
        def format_date(date_obj, format_str="%Y-%m-%d"):
            """Format date objects."""
            if isinstance(date_obj, datetime):
                return date_obj.strftime(format_str)
            return str(date_obj)
        
        def safe_json(data):
            """Safely convert data to JSON string."""
            try:
                return json.dumps(data, default=str)
            except:
                return str(data)
        
        # Register filters
        self.jinja_env.filters['format_number'] = format_number
        self.jinja_env.filters['truncate_text'] = truncate_text
        self.jinja_env.filters['format_date'] = format_date
        self.jinja_env.filters['safe_json'] = safe_json
    
    def set_config(self, config: ReportConfig):
        """Set report configuration."""
        self.config = config
        logger.info(f"✅ Report configuration updated: {config.title}")
    
    def initialize_components(self, css_tooltip_system, chart_generator):
        """Initialize CSS tooltip system and chart generator."""
        self.css_tooltip_system = css_tooltip_system
        self.chart_generator = chart_generator
        logger.info("✅ Report components initialized")
    
    async def generate_report(
        self,
        modules_data: List[ModuleData],
        config: Optional[ReportConfig] = None,
        output_filename: Optional[str] = None
    ) -> Dict[str, Any]:
        """Generate a complete report from module data.
        
        Args:
            modules_data: List of module data to include in report
            config: Optional report configuration
            output_filename: Optional output filename
            
        Returns:
            Dictionary with report generation results
        """
        try:
            start_time = datetime.now()
            
            # Use provided config or default
            if config:
                self.set_config(config)
            
            # Generate output filename if not provided
            if not output_filename:
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                output_filename = f"python_report_{timestamp}.html"
            
            output_path = self.output_dir / output_filename
            
            # Process modules data
            processed_modules = await self._process_modules(modules_data)
            
            # Generate CSS for tooltips
            tooltip_css = ""
            if self.css_tooltip_system and self.config.include_tooltips:
                tooltip_css = self.css_tooltip_system.generate_css(processed_modules)
            
            # Generate charts
            charts_html = ""
            if self.chart_generator and self.config.include_charts:
                charts_html = await self.chart_generator.generate_charts_html(processed_modules)
            
            # Prepare template context
            context = {
                'config': self.config,
                'modules': processed_modules,
                'tooltip_css': tooltip_css,
                'charts_html': charts_html,
                'generation_time': datetime.now().isoformat(),
                'total_modules': len(processed_modules),
                'responsive': self.config.responsive_layout,
                'offline_compatible': self.config.offline_compatible
            }
            
            # Render HTML using template
            html_content = await self._render_template(context)
            
            # Write to file
            output_path.write_text(html_content, encoding='utf-8')
            
            # Calculate performance metrics
            generation_time = (datetime.now() - start_time).total_seconds()
            file_size = output_path.stat().st_size
            
            result = {
                'success': True,
                'output_path': str(output_path),
                'filename': output_filename,
                'generation_time_seconds': generation_time,
                'file_size_bytes': file_size,
                'modules_processed': len(processed_modules),
                'tooltips_included': bool(tooltip_css),
                'charts_included': bool(charts_html),
                'message': f"Report generated successfully in {generation_time:.2f}s"
            }
            
            logger.info(f"✅ Report generated: {output_filename} ({file_size:,} bytes)")
            return result
            
        except Exception as e:
            logger.error(f"❌ Report generation failed: {e}")
            return {
                'success': False,
                'error': str(e),
                'message': "Failed to generate report"
            }
    
    async def _process_modules(self, modules_data: List[ModuleData]) -> List[Dict[str, Any]]:
        """Process and prepare module data for template rendering."""
        processed_modules = []
        
        for module_data in modules_data:
            processed_module = {
                'id': module_data.module_id,
                'title': module_data.title,
                'content': module_data.content,
                'tooltip_data': module_data.tooltip_data,
                'chart_data': module_data.chart_data,
                'metadata': module_data.metadata,
                'has_tooltips': bool(module_data.tooltip_data),
                'has_charts': bool(module_data.chart_data)
            }
            
            # Add tooltip CSS classes if tooltips exist
            if module_data.tooltip_data:
                processed_module['tooltip_classes'] = self._generate_tooltip_classes(module_data.tooltip_data)
            
            processed_modules.append(processed_module)
        
        return processed_modules
    
    def _generate_tooltip_classes(self, tooltip_data: Dict[str, Any]) -> Dict[str, str]:
        """Generate CSS classes for tooltip elements."""
        classes = {}
        for tooltip_id, tooltip_info in tooltip_data.items():
            # Generate unique CSS class for this tooltip
            css_class = f"tooltip-{tooltip_id.replace('_', '-')}"
            classes[tooltip_id] = css_class
        return classes
    
    async def _render_template(self, context: Dict[str, Any]) -> str:
        """Render the HTML template with the provided context."""
        try:
            # Get the main template
            template = self.jinja_env.get_template('python_report_template.html')
            return template.render(**context)
        except Exception as e:
            logger.error(f"Template rendering failed: {e}")
            # Fallback to basic HTML if template not found
            return self._generate_fallback_html(context)
    
    def _generate_fallback_html(self, context: Dict[str, Any]) -> str:
        """Generate fallback HTML if template is not available."""
        modules_html = ""
        for module in context['modules']:
            modules_html += f"""
            <div class="module" id="module-{module['id']}">
                <h2>{module['title']}</h2>
                <div class="content">{module['content']}</div>
            </div>
            """
        
        return f"""
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>{context['config'].title}</title>
            <style>
                {context.get('tooltip_css', '')}
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .module {{ margin-bottom: 30px; padding: 20px; border: 1px solid #ddd; }}
                .module h2 {{ color: #333; }}
            </style>
        </head>
        <body>
            <h1>{context['config'].title}</h1>
            <p>{context['config'].description}</p>
            {modules_html}
            {context.get('charts_html', '')}
        </body>
        </html>
        """
    
    def get_generator_info(self) -> Dict[str, Any]:
        """Get information about the generator capabilities."""
        return {
            'name': 'Python Report Generator',
            'version': '1.0.0',
            'features': [
                'Pure Python implementation',
                'CSS-only tooltips',
                'Static chart generation',
                'Offline viewing capability',
                'Fast performance',
                'Responsive design'
            ],
            'output_formats': ['html'],
            'dependencies': ['jinja2', 'pandas', 'numpy'],
            'javascript_required': False
        }


# Convenience function for quick report generation
async def generate_quick_report(
    modules_data: List[ModuleData],
    title: str = "Quick Report",
    output_dir: str = "Results"
) -> Dict[str, Any]:
    """Generate a quick report with default settings."""
    generator = PythonReportGenerator(output_dir=output_dir)
    config = ReportConfig(title=title, description="Quick report generated by DIA3")
    
    return await generator.generate_report(modules_data, config)


if __name__ == "__main__":
    # Example usage
    async def main():
        # Create sample module data
        sample_modules = [
            ModuleData(
                module_id="executive_summary",
                title="Executive Summary",
                content="This is a sample executive summary module.",
                tooltip_data={
                    "summary_tooltip": {
                        "title": "Executive Summary",
                        "description": "High-level overview of the analysis"
                    }
                }
            )
        ]
        
        # Generate report
        generator = PythonReportGenerator()
        result = await generator.generate_report(sample_modules)
        print(f"Report generation result: {result}")
    
    asyncio.run(main())
